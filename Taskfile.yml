---
version: "3"
env:
  LOCAL_REGISTRY: "titan.local:5000"
  PROJECT: "workflows-testbed-docker"
tasks:
  # Static Analysis
  check:
    summary: Run Trunk check
    desc: Run Trunk check
    cmds:
      - trunk check
  static:
    summary: Run static analysis check
    desc: Run static analysis check
    cmds:
      - semgrep --config=auto .
  security:
    summary: Run security check
    desc: Run security check
    cmds:
      - trivy config .
      - trivy fs .
      - semgrep --config=p/security-audit .
      - semgrep --config=p/secrets .
  # Build
  tag:
    summary: Generate build tag
    desc: Generate build tag
    silent: true
    cmds:
      - |
        if [ -z "$(git status --porcelain)" ]; then
          echo $(git rev-parse --short HEAD)
        else
          echo "dev-$(date +%s)"
        fi
  image:
    summary: Build deployment images
    desc: Build deployment images
    silent: true
    cmds:
      - |
        # Credentials
        stty -echo
        read -r -p 'Enter Github Username: ' GITHUB_USER_REF
        echo ""
        read -r -p 'Enter Github personal access token with read:packages permissions: ' GITHUB_TOKEN_REF
        echo ""
        stty echo
        export GITHUB_USER_REF=$GITHUB_USER_REF
        export GITHUB_TOKEN_REF=$GITHUB_TOKEN_REF

        # Clean
        rm -rf target && mkdir target

        # Build
        docker build -f Dockerfile . --progress=plain --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --target output --output type=local,dest=target

        # Status
        docker build -f Dockerfile . --progress=plain --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --target status

        # Image
        docker build -f Dockerfile . --progress=plain --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --tag $LOCAL_REGISTRY/$PROJECT/testbed-docker:{{ .TAG }}
    vars:
      TAG:
        sh: task tag
  build:
    summary: Build Java projects on host
    desc: Build Java projects on host
    cmds:
      - mvn clean install -Denforcer.fail=false
  tool-versions:upgrade:repo:
    summary: Upgrade version in .tool-versions
    desc: Upgrade version in .tool-versions
    internal: true
    silent: true
    cmds:
      - |
        version=$(gh api -H "Accept: application/vnd.github+json" repos/{{ .OWNER }}/{{ .NAME }}/releases/latest | jq .tag_name -r)
        version=${version//v}
        sed -i "s/{{ .NAME }}.*/{{ .NAME }} $version/g" .tool-versions
  tool-versions:upgrade:
    summary: Upgrade versions in .tool-versions
    desc: Upgrade versions in .tool-versions
    cmds:
      - task: tool-versions:upgrade:semgrep
      - task: tool-versions:upgrade:trivy
      - task: tool-versions:upgrade:task
  tool-versions:upgrade:semgrep:
    summary: Upgrade version of semgrep in .tool-versions
    desc: Upgrade version of semgrep .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: returntocorp
          NAME: semgrep
  tool-versions:upgrade:trivy:
    summary: Upgrade version of trivy in .tool-versions
    desc: Upgrade version of trivy .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: aquasecurity
          NAME: trivy
  tool-versions:upgrade:task:
    summary: Upgrade version of task in .tool-versions
    desc: Upgrade version of task .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: go-task
          NAME: task
