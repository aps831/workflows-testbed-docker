---
version: "3"
env:
  DOPPLER_PROJECT: "development"
  DOPPLER_CONFIG: "github"
  LOCAL_REGISTRY: "registry.local:5000"
  PROJECT: "workflows-testbed-docker"
tasks:
  # Build
  tag:
    summary: Generate build tag
    desc: Generate build tag
    silent: true
    cmds:
      - |
        if [ -z "$(git status --porcelain)" ]; then
          echo $(git rev-parse --short HEAD)
        else
          echo "dev-$(date +%s)"
        fi
  image:
    summary: Build deployment image
    desc: Build deployment image
    silent: true
    cmds:
      - |
        # Credentials
        [ -n "$DOPPLER_DEVELOPMENT_GITHUB_TOKEN" ] && export DOPPLER_TOKEN=$DOPPLER_DEVELOPMENT_GITHUB_TOKEN
        export GITHUB_USER_REF=$(doppler secrets get GITHUB_USER --plain)
        export GITHUB_TOKEN_REF=$(doppler secrets get GITHUB_TOKEN_READ_PACKAGES --plain)

        # Clean
        rm -rf target && mkdir target

        # Run socat
        DOCKER_GATEWAY_HOST=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
        docker run -d -p $DOCKER_GATEWAY_HOST:2375:2375 -v /var/run/docker.sock:/var/run/docker.sock --name socat alpine/socat tcp-listen:2375,reuseaddr,fork unix-connect:/var/run/docker.sock

        # Build
        docker build -f Dockerfile . --add-host host.docker.internal:host-gateway --progress=plain --sbom=false --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --target target --output type=local,dest=target

        # Status
        docker build -f Dockerfile . --add-host host.docker.internal:host-gateway --progress=plain --sbom=false --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --target status

        # Image
        docker build -f Dockerfile . --add-host host.docker.internal:host-gateway --progress=plain --sbom=false --build-arg MAVEN_PHASE="clean install" --build-arg ENFORCER_FAIL=false --secret id=GITHUB_USER_REF --secret id=GITHUB_TOKEN_REF --provenance=false --tag $LOCAL_REGISTRY/$PROJECT/testbed-docker:{{ .TAG }}

        # Stop socat
        docker rm -f $(docker ps -aqf "name=^socat$")

    vars:
      TAG:
        sh: task tag
  build:
    summary: Build Java project on host
    desc: Build Java project on host
    cmds:
      - mvn clean install -Denforcer.fail=false
  cosign:
    summary: Create and set cosign password and keys
    desc: Create and set cosign password and keys
    silent: true
    cmds:
      - |
        export COSIGN_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
        echo $COSIGN_PASSWORD | gh secret set COSIGN_PASSWORD
        NAME_WITH_OWNER=$(gh repo view --json="nameWithOwner" --jq=".nameWithOwner")
        export GITHUB_TOKEN=$(doppler secrets get GITHUB_TOKEN_REPO_ADMIN_PUBLIC_KEY --plain)
        cosign generate-key-pair github://$NAME_WITH_OWNER
        rm cosign.pub
  # tool-versions
  tool-versions:upgrade:repo:
    summary: Upgrade version in .tool-versions
    desc: Upgrade version in .tool-versions
    internal: true
    silent: true
    cmds:
      - |
        [[ "{{ .REPONAME }}" == "" ]] && REPONAME={{ .NAME }} || REPONAME={{ .REPONAME }}
        version=$(gh api -H "Accept: application/vnd.github+json" repos/{{ .OWNER }}/$REPONAME/releases/latest | jq .tag_name -r)
        version=${version//v}
        sed -i "s/{{ .NAME }}.*/{{ .NAME }} $version/g" .tool-versions
  tool-versions:upgrade:
    summary: Upgrade versions in .tool-versions
    desc: Upgrade versions in .tool-versions
    cmds:
      - task: tool-versions:upgrade:trivy
      - task: tool-versions:upgrade:task
      - task: tool-versions:upgrade:doppler
  tool-versions:upgrade:trivy:
    summary: Upgrade version of trivy in .tool-versions
    desc: Upgrade version of trivy .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: aquasecurity
          NAME: trivy
  tool-versions:upgrade:task:
    summary: Upgrade version of task in .tool-versions
    desc: Upgrade version of task .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: go-task
          NAME: task
  tool-versions:upgrade:doppler:
    summary: Upgrade version of doppler in .tool-versions
    desc: Upgrade version of doppler .tool-versions
    cmds:
      - task: tool-versions:upgrade:repo
        vars:
          OWNER: DopplerHQ
          REPONAME: cli
          NAME: doppler
  # semgrep
  semgrep:auto:
    summary: Run semgrep static analysis with auto config
    desc: Run semgrep static analysis with auto config
    silent: true
    cmds:
      - semgrep --config=auto .
  semgrep:security-audit:
    summary: Run semgrep static analysis with security-audit config
    desc: Run semgrep static analysis with security-audit config
    silent: true
    cmds:
      - semgrep --config=p/security-audit .
  semgrep:secrets:
    summary: Run semgrep static analysis with secrets config
    desc: Run semgrep static analysis with secrets config
    silent: true
    cmds:
      - semgrep --config=p/secrets .
  # trivy
  trivy:fs:
    summary: Run trivy fs check
    desc: Run trivy fs check
    silent: true
    cmds:
      - trivy fs .
  trivy:config:
    summary: Run trivy config check
    desc: Run trivy config check
    silent: true
    cmds:
      - trivy config .
